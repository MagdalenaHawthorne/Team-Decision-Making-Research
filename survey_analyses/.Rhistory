summary(model_fit_without, fit.measures = TRUE, standardized = TRUE, ci = T)
model_with <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
'
model_fit_with <- sem(model_with, data = cleaned_df)
summary(model_fit_with, fit.measures = TRUE, standardized = TRUE, ci = T)
t.test(.21, .03)
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
transactive_memory ~ team_structure
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
indirect2:= b*c1
cond_indir_1 := a*c3
cond_indir_2 := b*c3
'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
modificationindices(model_fit, minimum.value = 20)
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
transactive_memory ~ team_structure + interdependence
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
indirect2:= b*c1
cond_indir_1 := a*c3
cond_indir_2 := b*c3
'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
transactive_memory ~ interdependence
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
transactive_memory ~ interdependence
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
indirect2:= b*c1
cond_indir_1 := a*c3
cond_indir_2 := b*c3
'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
indirect2:= b*c1
cond_indir_1 := a*c3
cond_indir_2 := b*c3
'
model_fit <- sem(model_test, data = cleaned_df)
modificationindices(model_fit, minimum.value = 20)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
transactive_memory ~ interdependence
'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
## possible one
model_test <- '
decision_quality ~ team_structure + transactive_memory + knowledge_sharing
knowledge_sharing ~ team_structure + transactive_memory
transactive_memory ~ team_structure + interdependence'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE)
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
indirect2:= b*c1
cond_indir_1 := a*c3
cond_indir_2 := b*c3
'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + e2*inter_trans + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
indirect2:= b*c1
cond_indir_1 := a*c3
cond_indir_2 := b*c3
'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + e2*inter_trans + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
model_test <- '
decision_quality ~ c1*knowledge_sharing + c2*interdependence + c3*inter_knowshare + d1*team_structure + d2*inter_teamstr + e1*transactive_memory + e2*inter_trans + team_members + core_team_tenure + work_experience + gender
knowledge_sharing ~ a*team_structure + b*transactive_memory
direct1 := c1
direct2 := d1
direct3 := e1
indirect1:= a*c1
indirect2:= b*c1
cond_indir_1 := a*c3
cond_indir_2 := b*c3
'
model_fit <- sem(model_test, data = cleaned_df)
summary(model_fit, fit.measures = TRUE, standardized = TRUE, ci = T)
lm(decion_quality ~ knowledge_sharing * interdependence + team_structure * interdependence + transactive_memory * interdependence + team_members + core_team_tenure + work_experience + gender, data = cleaned_df)
lm(decision_quality ~ knowledge_sharing * interdependence + team_structure * interdependence + transactive_memory * interdependence + team_members + core_team_tenure + work_experience + gender, data = cleaned_df)
summary(lm(decision_quality ~ knowledge_sharing * interdependence + team_structure * interdependence + transactive_memory * interdependence + team_members + core_team_tenure + work_experience + gender, data = cleaned_df))
knitr::opts_chunk$set(echo = TRUE)
survey_data <- read_csv("data/survey_results.csv")
library(lavaan)
library(tidyverse)
library(tidyverse)
# library(lubridate)
library(psych)
library(readr)
library(forcats)
# library(stringr)
```{r}
## load
```{r}
survey_data <- read_csv("data/survey_results.csv")
survey_data <- rownames_to_column(survey_data, var = "participant")
survey_data <- rownames_to_column(survey_data, var = "participant")
survey_data <- read_csv("data/survey_results.csv")
survey_data <- rownames_to_column(survey_data, var = "participant")
# remove people who reported a team size that is out of pre-defined range or an
survey_data <- survey_data %>%
filter(!team_members > 55) %>%
filter(!work_experience > 50)
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 | team_members < 3) %>%
filter(!work_experience > 50)
survey_data %>% filter(participant == 233)
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 | !team_members < 3) %>%
filter(!work_experience > 50)
survey_data %>% filter(participant == 233)
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 || !team_members < 3) %>%
filter(!work_experience > 50)
survey_data %>% filter(participant == 233)
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 & !team_members < 3) %>%
filter(!work_experience > 50)
survey_data %>% filter(participant == 233)
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 & team_members < 3) %>%
filter(!work_experience > 50)
survey_data %>% filter(participant == 233)
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 & !team_members < 3) %>%
filter(!work_experience > 50)
survey_data %>% filter(participant == 233)
survey_data %>% filter(participant == 233 | participant == 815)
View(survey_data)
nrow(survey_data)
survey_data <- read_csv("data/survey_results.csv")
survey_data <- rownames_to_column(survey_data, var = "participant")
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 & !team_members < 3) %>%
filter(!work_experience > 50)
survey_data <- survey_data %>%
filter(!participant %in% c(94, 275, 334, 531, 733))
nrow(survey_data)
survey_data <- survey_data %>%
mutate_at(vars(indiv_team_tenure, core_team_tenure, level), as.factor)
knitr::opts_chunk$set(echo = TRUE)
library(lavaan)
library(tidyverse)
# library(lubridate)
library(psych)
library(readr)
library(forcats)
# library(stringr)
survey_data <- read_csv("data/survey_results.csv")
survey_data <- rownames_to_column(survey_data, var = "participant")
# remove people who reported team sizes or work experience outside of the pre-defined range
survey_data <- survey_data %>%
filter(!team_members > 55 & !team_members < 3) %>%
filter(!work_experience > 50)
# exclude participant due to missing data
survey_data <- survey_data %>%
filter(!participant %in% c(94, 275, 334, 531, 733))
View(survey_data)
nrow(survey_data)
survey_data <- survey_data %>%
mutate_at(vars(indiv_team_tenure, core_team_tenure, level), as.factor)
# list of items that are reversed:
# - tms_credib_4
# - tms_coord_3
# - tms_coord_5
# - knowledge_sharing_3
survey_data[,c("tms_credib_4", "tms_coord_3", "tms_coord_5", "knowledge_sharing_3")] <- 6 - survey_data[,c("tms_credib_4", "tms_coord_3", "tms_coord_5")]
survey_data[, "knowledge_sharing_3"] <- 7 - survey_data[,"knowledge_sharing_3"]
# team structure:
# - autonomy for products
# - autonomy for planning
# - autonomy for people
# - autonomy for processes
survey_data <- survey_data %>%
mutate(auto_prod = rowMeans(.[, c('auto_prod_1', 'auto_prod_2', "auto_prod_3")]), auto_plan = rowMeans(.[, c('auto_plan_1', 'auto_plan_2', "auto_plan_3")]), auto_peop = rowMeans(.[, c('auto_peop_1', 'auto_peop_2', "auto_peop_3")]), auto_proc = rowMeans(.[, c('auto_proc_1', 'auto_proc_2', "auto_proc_3")]))
# overall autonomy
survey_data <- survey_data %>%
rowwise() %>%
mutate(team_structure = mean(c(auto_prod, auto_plan, auto_peop, auto_proc))) %>%
ungroup()
# TMS:
# specialization
# credibilty
# coordination
survey_data <- survey_data %>%
mutate(specialization = rowMeans(.[, c('tms_special_1', 'tms_special_2', "tms_special_3", "tms_special_4", "tms_special_5")]), credibility = rowMeans(.[, c('tms_credib_1', 'tms_credib_2', "tms_credib_3", "tms_credib_4", "tms_credib_5")]), coordination = rowMeans(.[, c('tms_coord_1', 'tms_coord_2', "tms_coord_3", "tms_coord_4", "tms_coord_5")]))
# Group Transactive Memory
survey_data <- survey_data %>%
mutate(transactive_memory = rowMeans(.[, c('specialization', 'credibility')]))
# overall TMS
survey_data <- survey_data %>%
mutate(tms = rowMeans(.[, c('specialization', 'credibility', 'coordination')]))
# decision quality:
# - relative
# - general
survey_data <- survey_data %>%
mutate(rel_decision_quality = rowMeans(.[, c('decision_compare_1', 'decision_compare_2', 'decision_compare_3')]), general_decision_quality = rowMeans(.[, c('decision_general_1', 'decision_general_2', 'decision_general_3')]))
# decision quality overall
survey_data <- survey_data %>%
mutate(decision_quality = rowMeans(.[, c('decision_compare_1', 'decision_compare_2', 'decision_compare_3', 'decision_general_1', 'decision_general_2', 'decision_general_3')]))
# information sharing
survey_data <- survey_data %>%
mutate(information_sharing = rowMeans(.[, c('knowledge_sharing_1', 'knowledge_sharing_2', 'knowledge_sharing_3', 'knowledge_sharing_4')]))
# knowledge utilization
survey_data <- survey_data %>%
mutate(knowledge_utilization = rowMeans(.[, c('knowledge_utilization_1', 'knowledge_utilization_2', 'knowledge_utilization_3')]))
# both: knowledge sharing
survey_data <- survey_data %>%
mutate(knowledge_sharing = rowMeans(.[, c('knowledge_utilization_1', 'knowledge_utilization_2', 'knowledge_utilization_3', 'knowledge_sharing_1', 'knowledge_sharing_2', 'knowledge_sharing_3', 'knowledge_sharing_4')]))
survey_data <-survey_data %>%
mutate(interdependence = rowMeans(.[, c('interdep_1', 'interdep_2', "interdep_3","interdep_4")]))
survey_data <- survey_data %>%
mutate(group_identification = rowMeans(.[, c("group_ident_1", 'group_ident_2', "group_ident_3", "group_ident_4")]))
# intrinsic motivation
survey_data <- survey_data %>%
mutate(intrinsic_motivation = rowMeans(.[, c('int_ident_1', 'int_ident_2', 'int_ident_3', 'int_intr_1', 'int_intr_2', 'int_intr_3')]))
# extrinsic motivation
survey_data <- survey_data %>%
mutate(extrinsic_motivation = rowMeans(.[, c('ext_mat_1', 'ext_mat_2', 'ext_mat_3', 'ext_soc_1', 'ext_soc_2', 'ext_soc_3')]))
survey_data_clean <- survey_data
write_csv(survey_data_clean, "survey_data_clean.csv")
summary(alpha(survey_data_clean[c('auto_prod_1', 'auto_prod_2', 'auto_prod_3',"auto_proc_1","auto_proc_2","auto_proc_3","auto_peop_1", 'auto_peop_2', "auto_peop_3", "auto_plan_1", "auto_plan_2", "auto_plan_3")], check.keys=TRUE))
summary(alpha(survey_data_clean[c('tms_special_1','tms_special_2',"tms_special_3","tms_special_4","tms_special_5",'tms_credib_1','tms_credib_2',"tms_credib_3","tms_credib_4","tms_credib_5",'tms_coord_1','tms_coord_2',"tms_coord_3","tms_coord_4",'tms_coord_5')], check.keys=TRUE))
# specialization
summary(alpha(survey_data_clean[c('tms_special_1','tms_special_2',"tms_special_3","tms_special_4","tms_special_5")], check.keys=TRUE))
#credibility
summary(alpha(survey_data_clean[c('tms_credib_1','tms_credib_2',"tms_credib_3","tms_credib_4","tms_credib_5")], check.keys=TRUE))
#coordintion
summary(alpha(survey_data_clean[c('tms_coord_1','tms_coord_2',"tms_coord_3","tms_coord_4",'tms_coord_5')], check.keys=TRUE))
summary(alpha(survey_data_clean[c('decision_compare_1', 'decision_compare_2', 'decision_compare_3', 'decision_general_1', 'decision_general_2', 'decision_general_3')], check.keys=TRUE))
alpha(survey_data_clean[c('decision_compare_1', 'decision_compare_2', 'decision_compare_3')], check.keys=TRUE)
alpha(survey_data_clean[c('decision_general_1', 'decision_general_2', 'decision_general_3')], check.keys=TRUE)
summary(alpha(survey_data_clean[c('knowledge_utilization_1', 'knowledge_utilization_2', 'knowledge_utilization_3', 'knowledge_sharing_1', 'knowledge_sharing_2', 'knowledge_sharing_3', 'knowledge_sharing_4')], check.keys=TRUE))
summary(alpha(survey_data_clean[c("group_ident_1", 'group_ident_2', "group_ident_3", "group_ident_4")]), check.keys = TRUE)
summary(alpha(survey_data_clean[c('int_ident_1', 'int_ident_2', 'int_ident_3', 'int_intr_1', 'int_intr_2', 'int_intr_3')]), check.keys = TRUE)
summary(alpha(survey_data_clean[c('ext_mat_1', 'ext_mat_2', 'ext_mat_3', 'ext_soc_1', 'ext_soc_2', 'ext_soc_3')]), check.keys = TRUE)
summary(alpha(survey_data_clean[c('interdep_1', 'interdep_2', "interdep_3","interdep_4")]), check.keys = TRUE)
perc_female <- survey_data_clean %>%
mutate(gender = gender == "Female")
perc_female$gender
perc_female %>%
summarise(percent_female = sum(gender/n()*100,  na.rm = TRUE))
survey_data_clean <- survey_data_clean %>% mutate_at(vars(work_experience, core_team_tenure), as.numeric)
survey_data_clean %>% summarise(avg_work_experience = mean(work_experience))
survey_data_clean %>%
ggplot(aes(functional_area)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90))
summary(survey_data_clean$team_members)
summary(survey_data_clean$core_team_tenure)
summary(survey_data_clean$level)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(lavaan)
library(mediation)
library(mediation)
library(MASS)
```{r}
cleaned_df <- read_csv("survey_data_clean.csv")
# change to factor
cleaned_df <- cleaned_df %>%
mutate_at(vars(level, gender), as.factor) %>% mutate(gender = gender == 'Female')
#change to numeric
cleaned_df <- cleaned_df %>%
mutate_at(vars(work_experience, core_team_tenure, gender), as.numeric)
psych::describe(cleaned_df$gender)
library(psych)
ggplot(aes(decision_quality), data=cleaned_df) +
geom_density()
ggplot(aes(interdependence), data=cleaned_df) +
geom_density()
ggplot(aes(team_structure), data=cleaned_df) +
geom_density()
ggplot(aes(transactive_memory), data=cleaned_df) +
geom_density()
ggplot(aes(knowledge_sharing), data=cleaned_df) +
geom_density()
psych::describe(cleaned_df$core_team_tenure)
psych::describe(cleaned_df$transactive_memory)
cleaned_df <- cleaned_df %>%
mutate(career_level = fct_recode(level, "NA" = "Other (Please specify (optional)):"))
# cleaned_df <- cleaned_df %>%
mutate(career_level = fct_recode(career_level, "Associate" = 'NA'))
cleaned_df$core_team_tenure[is.na(cleaned_df$core_team_tenure)] <- mean(cleaned_df$core_team_tenure, na.rm=TRUE)
is.na(cleaned_df$core_team_tenure)
summary(cleaned_df$core_team_tenure)
small_df <- cleaned_df %>%
dplyr::select(decision_quality, team_structure, transactive_memory, knowledge_sharing, interdependence, team_members, core_team_tenure, work_experience, gender)
small_df
cor_mat <- cor(small_df, method = c("pearson", "kendall", "spearman"))
round(cor_mat, 2)
library(corrplot)
# NAs vermeiden
corrplot(cor_mat, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(cor_mat, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
eigen(cor_mat)
max(eigen(cor_mat)$values)/min(eigen(cor_mat)$values)
kappa((cor_mat), exact = TRUE)
library(Hmisc)
rcorr(as.matrix(small_df))
cleaned_df$team_structure <- scale(cleaned_df$team_structure, center = TRUE, scale = FALSE)[,]
cleaned_df$interdependence <- scale(cleaned_df$interdependence, center = TRUE, scale = FALSE)[,]
cleaned_df$knowledge_sharing <- scale(cleaned_df$knowledge_sharing, center = TRUE, scale = FALSE)[,]
cleaned_df$transactive_memory <- scale(cleaned_df$transactive_memory, center = TRUE, scale = FALSE)[,]
cleaned_df$core_team_tenure <- scale(cleaned_df$core_team_tenure, center = TRUE, scale = FALSE)[,]
cleaned_df$work_experience <- scale(cleaned_df$work_experience, center = TRUE, scale = FALSE)[,]
cleaned_dfteam_members <- scale(cleaned_df$team_members, center = TRUE, scale = FALSE)[,]
# cleaned_df <- cleaned_df %>% mutate_at(vars(transactive_memory, team_structure, interdependence, knowledge_sharing, core_team_tenure, work_experience, team_members, intrinsic_motivation, group_identification), funs(scale(.)))
# STEP 1
decision_1 <- lm(decision_quality ~ gender + work_experience + team_members + core_team_tenure, data = cleaned_df)
summary(decision_1)
knowledge_1 <- lm(knowledge_sharing ~ gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(knowledge_1)
transactive_1 <- lm(transactive_memory ~ gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(transactive_1)
# STEP 2
decision_2 <- lm(decision_quality ~ team_structure + interdependence + gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(decision_2)
knowledge_2 <- lm(knowledge_sharing ~ team_structure + interdependence + gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(knowledge_2)
transactive_2 <- lm(transactive_memory ~ team_structure + interdependence + gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(transactive_2)
# STEP 3
decision_3 <- lm(decision_quality ~ team_structure * interdependence + gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(decision_3)
knowledge_3 <- lm(knowledge_sharing ~ team_structure * interdependence + gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(knowledge_3)
transactive_3 <- lm(transactive_memory ~ team_structure * interdependence + gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(transactive_3)
summary(decision_3)
decision_3 <- lm(decision_quality ~ team_structure * interdependence + gender + team_members + work_experience + core_team_tenure, data = cleaned_df)
summary(decision_3)
decision_4 <- lm(decision_quality ~ gender + team_members + work_experience + core_team_tenure + team_structure * interdependence + transactive_memory, data = cleaned_df)
summary(decision_4)
decision_5 <- lm(decision_quality ~ gender + team_members + work_experience + core_team_tenure + team_structure * interdependence + transactive_memory + knowledge_sharing, data = cleaned_df)
summary(decision_5)
anova(decision_4, decision_5)
library(mediation)
mediate <- mediation::mediate
Mod.Med.Model.1 <- lm(knowledge_sharing ~ team_structure * transactive_memory, data = cleaned_df); summary(Mod.Med.Model.1)
Mod.Med.Model.2 <- lm(decision_quality ~ team_structure * transactive_memory + knowledge_sharing, data = cleaned_df); summary(Mod.Med.Model.2)
low_trans_memory <- mean(cleaned_df$transactive_memory)-sd(cleaned_df$transactive_memory)
high_trans_memory <- mean(cleaned_df$transactive_memory)+sd(cleaned_df$transactive_memory)
mod_med_low_trans_memory <- mediate(Mod.Med.Model.1, Mod.Med.Model.2,
covariates = list(transactive_memory = low_trans_memory),
boot = TRUE,
boot.ci.type = "bca",
sims = 1000, treat = "team_structure",
mediator = "knowledge_sharing")
mod_med_low_trans_memory <- mediate(Mod.Med.Model.1, Mod.Med.Model.2,
covariates = list(transactive_memory = low_trans_memory),
boot = TRUE,
boot.ci.type = "bca",
sims = 1000, treat = "team_structure",
mediator = "knowledge_sharing")
summary(mod_med_low_trans_memory)
summary(mod_med_low_trans_memory)
mod_med_high_trans_memory <- mediate(Mod.Med.Model.1, Mod.Med.Model.2,
covariates = list(transactive_memory = high_trans_memory),
boot = TRUE,
boot.ci.type = "bca",
sims = 1000, treat = "team_structure",
mediator = "knowledge_sharing")
summary(mod_med_high_trans_memory)
mod_med_test_1 <- mediate(Mod.Med.Model.1, Mod.Med.Model.2,
boot = TRUE,
boot.ci.type = "bca",
sims = 1000, treat = "team_structure",
mediator = "knowledge_sharing")
test.modmed(mod_med_test_1, covariates.1 = list(transactive_memory = low_trans_memory), covariates.2 = list(transactive_memory = high_trans_memory), sims = 1000)
Mod.Med.Model.3 <- lm(knowledge_sharing ~ team_structure * interdependence, data = cleaned_df); summary(Mod.Med.Model.3)
Mod.Med.Model.4 <- lm(decision_quality ~ team_structure + knowledge_sharing * interdependence, data = cleaned_df); summary(Mod.Med.Model.4)
low_inter <- mean(cleaned_df$interdependence)-sd(cleaned_df$interdependence)
high_inter <- mean(cleaned_df$interdependence)+sd(cleaned_df$interdependence)
mod_med_low_inter <- mediate(Mod.Med.Model.3, Mod.Med.Model.4,
covariates = list(interdependence = low_inter), boot = TRUE,
boot.ci.type = "bca",
sims = 2000, treat = "team_structure",
mediator = "knowledge_sharing")
mod_med_low_inter <- mediate(Mod.Med.Model.3, Mod.Med.Model.4,
covariates = list(interdependence = low_inter), boot = TRUE,
boot.ci.type = "bca",
sims = 2000, treat = "team_structure",
mediator = "knowledge_sharing")
summary(mod_med_high_inter)
mod_med_high_inter <- mediate(Mod.Med.Model.3, Mod.Med.Model.4,
covariates = list(interdependence = high_inter), boot = TRUE,
boot.ci.type = "bca",
sims = 1000, treat = "team_structure",
mediator = "knowledge_sharing")
R.Version()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(lavaan)
library(mediation)
library(MASS)
cleaned_df <- read_csv("survey_data_clean.csv")
# change to factor
cleaned_df <- cleaned_df %>%
mutate_at(vars(level, gender), as.factor)
#change to numeric
cleaned_df <- cleaned_df %>%
mutate_at(vars(work_experience, core_team_tenure), as.numeric)
t1 <- lm(transactive_memory ~ team_structure * interdependence, data = cleaned_df); summary(t1)
t2 <- lm(knowledge_sharing ~ transactive_memory + interdependence, data = cleaned_df); summary(t2)
t3 <- lm(decision_quality ~ transactive_memory + team_structure + knowledge_sharing * interdependence, data = cleaned_df); summary(t3)
t4 <- lm(knowledge_sharing ~ transactive_memory + team_structure, data = cleaned_df); summary(t4)
cleaned_df <- cleaned_df %>%
mutate(HighLowTransMem = case_when(
transactive_memory >= median(transactive_memory) ~ "high",
transactive_memory < median(transactive_memory) ~ "low"))
cleaned_df <- cleaned_df %>%
mutate(HighLowInde = case_when(
interdependence >= median(interdependence) ~ "high",
interdependence < median(interdependence) ~ "low"))
cleaned_df <- cleaned_df %>%
mutate(HighLowTeam = case_when(
team_structure >= median(team_structure) ~ "high",
team_structure < median(team_structure) ~ "low"))
ggplot(aes(x=team_structure,y=knowledge_sharing, fill = HighLowTransMem, group = HighLowTransMem), data=cleaned_df) +
geom_smooth()
ggplot(aes(x=transactive_memory,y=knowledge_sharing, fill = HighLowTeam, group = HighLowTeam), data=cleaned_df) +
geom_smooth()
ggplot(aes(x=knowledge_sharing, y=decision_quality, fill = HighLowTeam, group = HighLowTeam), data=cleaned_df) +
geom_smooth() +
geom_point()
ggplot(aes(x=team_structure,y=transactive_memory), data=cleaned_df) +
geom_smooth() +
geom_point()
ggplot(aes(x=team_structure,y=decision_quality), data=cleaned_df) +
geom_smooth() +
geom_point()
ggplot(aes(x=team_structure,y=knowledge_sharing), data=cleaned_df) +
geom_smooth() +
geom_point()
ggplot(aes(x=knowledge_sharing, y=decision_quality), data=cleaned_df) +
geom_smooth() +
geom_point()
ggplot(aes(x=team_structure, y=transactive_memory, fill = HighLowInde, group = HighLowInde), data=cleaned_df) +
geom_smooth()
ggplot(aes(x=team_structure, y=decision_quality, fill = HighLowInde, group = HighLowInde), data=cleaned_df) +
geom_smooth()
# The more non-hierarchical the more knowledge is shared. **To a lesser extent, having a strong TMS system in place additionally increases knowledge sharing**. However, TMS is very important in moderately hierarcical regimes where it can lead to much higher knowledge sharing than similarly hierarchical teams without strong TMS systems in place.
tinytex::parse_packages()
tinytex::parse_packages()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::reinstall_tinytex()
install.packages("tinytex")
install.packages("xelatex")
